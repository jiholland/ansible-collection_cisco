---
# tasks file for upgrade

- name: check | Gather facts.
  cisco.ios.ios_facts:
    gather_subset: min

- name: check | Include model and system-specific variables.
  ansible.builtin.include_vars:
    file: "{{ lookup('ansible.builtin.first_found', params) }}"
  vars:
    params:
      files:
        - "{{ (ansible_facts['net_model'] is regex('^C9[3-6][0-9][0-9]')) | ternary('cat9k', '') }}_{{ ansible_facts['net_system'] }}.yml"
        - "{{ (ansible_facts['net_model'] is regex('^WS-C2960CX')) | ternary('c2960cx', '') }}_{{ ansible_facts['net_system'] }}.yml"
        - "{{ (ansible_facts['net_model'] is regex('^Nexus9000')) | ternary('nexus9000', '') }}_{{ ansible_facts['net_system'] }}.yml"
      paths:
        - 'vars'

- name: check | Print compliance.
  ansible.builtin.debug:
    msg: Installed {{ ansible_facts['net_system'] }} is {{ ansible_facts['net_version'] }}. Compliant version is {{ upgrade_compliant_version }}.
    verbosity: 0
  when: not ansible_check_mode

- name: check | Assert compliance.
  ansible.builtin.assert:
    that: ansible_facts['net_version'] is version(upgrade_compliant_version)
    success_msg: Compliant {{ ansible_facts['net_system'] }} {{ ansible_facts['net_version'] }} is installed.
    fail_msg: Installed {{ ansible_facts['net_system'] }} is {{ ansible_facts['net_version'] }}. Upgrade to {{ upgrade_compliant_version }} is required.
  when: ansible_check_mode | bool
