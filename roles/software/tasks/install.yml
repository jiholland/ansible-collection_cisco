---
# tasks file for sofware

- name: install | Install IOS.
  when:
    - ansible_network_os is eq('cisco.ios.ios')
    - ansible_facts['net_iostype'] is eq('IOS')
  block:

    - name: install | Set boot variable. Copy running-config startup-config.
      cisco.ios.ios_config:
        lines:
          - boot system flash:{{ software_image }}
        save_when: always

    - name: install | Install compliant IOS and reboot.
      cisco.ios.ios_command:
        commands:
          - command: reload reason Upgrade {{ ansible_facts['net_system'] }} to {{ software_version }}
            prompt: Proceed with reload
            answer: "\r"
      changed_when: true
      register: __software_installed_output

    - name: install | Wait for device to reboot.
      ansible.builtin.wait_for_connection:
        delay: "{{ software_reboot_delay }}"
        timeout: "{{ software_reboot_timeout }}"


- name: install | Install IOS-XE.
  when:
    - ansible_network_os is eq('cisco.ios.ios')
    - ansible_facts['net_iostype'] is eq('IOS-XE')
  block:

    - name: install | Set boot variable and enable auto-boot. Copy running-config startup-config.
      cisco.ios.ios_config:
        lines:
          - no boot system all
          - boot system flash:packages.conf
          - no boot manual
        save_when: always

    - name: install | Install compliant OS and reboot.
      cisco.ios.ios_command:
        commands:
          - install add file flash:{{ software_image }} activate commit prompt-level none
      when: software_issu is false
      changed_when: true
      vars:
        ansible_command_timeout: "{{ software_install_timeout }}"
      register: __software_installed_output

    - name: install | Install compliant OS using ISSU.
      cisco.ios.ios_command:
        commands:
          - install add file flash:{{ software_image }} activate issu commit
      when: software_issu is true
      changed_when: true
      vars:
        ansible_command_timeout: "{{ software_install_issu_timeout }}"
      register: __software_installed_output

  rescue:

    - name: install | Sleep to recover.
      ansible.builtin.wait_for:
        timeout: "{{ software_install_rescue_timeout }}"

  always:

    - name: install | Wait for device to reboot.
      ansible.builtin.wait_for_connection:
        delay: "{{ software_reboot_delay }}"
        timeout: "{{ software_reboot_timeout }}"


- name: install | Install NXOS.
  when: ansible_network_os is eq('cisco.nxos.nxos')
  block:

    - name: install | Copy running-config startup-config.
      cisco.nxos.nxos_config:
        save_when: always

    - name: install | Install compliant OS and reboot.
      cisco.nxos.nxos_command:
        commands:
          - install all nxos bootflash:{{ software_image }} non-interruptive
      when: software_issu is false
      changed_when: true
      vars:
        ansible_command_timeout: "{{ software_install_timeout }}"
      register: __software_installed_output

    - name: install | Install compliant OS none-disruptively using ISSU.
      cisco.nxos.nxos_command:
        commands:
          - install all nxos bootflash:{{ software_image }} non-disruptive
      when: software_issu is true
      changed_when: true
      vars:
        ansible_command_timeout: "{{ software_install_issu_timeout }}"
      register: __software_installed_output

  rescue:

    - name: install | Sleep to recover.
      ansible.builtin.wait_for:
        timeout: "{{ software_install_rescue_timeout }}"

  always:

    - name: install | Wait for device to reboot.
      ansible.builtin.wait_for_connection:
        delay: "{{ software_reboot_delay }}"
        timeout: "{{ software_reboot_timeout }}"


- name: install | Assert the software upgrade.
  when: __software_installed_output is defined
  block:

    - name: install | Gather facts.
      cisco.ios.ios_facts:
        gather_subset:
          - min
      register: __software_result
      until: not __software_result['failed']
      retries: 5
      delay: 10

    - name: install | Assert that the software upgrade succeeded.
      ansible.builtin.assert:
        that:
          - ansible_facts['net_version'] is ansible.builtin.version(software_version)
        success_msg: Upgrade to {{ software_version }} was successful.
        fail_msg: Unable to upgrade. Device is running {{ ansible_facts['net_version'] }}. Expected {{ software_version }}.
