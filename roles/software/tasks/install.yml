---
# tasks file for software

- name: install | Install IOS.
  when:
    - ansible_network_os is eq('cisco.ios.ios')
    - ansible_facts['net_iostype'] is eq('IOS')
  block:

    - name: install | Set boot variable. Copy running-config startup-config.
      cisco.ios.ios_config:
        lines:
          - "boot system flash:{{ software_image }}"
        save_when: always

    - name: install | Install compliant IOS and reboot.
      cisco.ios.ios_command:
        commands:
          - command: "reload reason Upgrade {{ ansible_facts['net_system'] }} to {{ software_version }}"
            prompt: "Proceed with reload"
            answer: "\r"
      changed_when: true
      when: not ansible_check_mode

    - name: install | Wait for device to reboot.
      ansible.builtin.wait_for_connection:
        delay: "{{ __software_reboot_delay }}"
        timeout: "{{ __software_reboot_timeout }}"


- name: install | Install IOS-XE.
  when:
    - ansible_network_os is eq('cisco.ios.ios')
    - ansible_facts['net_iostype'] is eq('IOS-XE')
  block:

    - name: install | Set boot variable. Copy running-config startup-config.
      cisco.ios.ios_config:
        lines:
          - "no boot system all"
          - "boot system flash:packages.conf"
        save_when: always

    - name: install | Install compliant OS and reboot.
      cisco.ios.ios_command:
        commands:
          - "install add file flash:{{ software_image }} activate {{ (software_issu is eq('yes')) | ternary('issu commit', 'commit prompt-leve none') }}"
      changed_when: true
      when: not ansible_check_mode
      vars:
        ansible_command_timeout: "{{ software_install_timeout }}"
        ansible_connect_timeout: "{{ software_install_timeout }}"

  rescue:

    - name: install | Sleep to recover.
      ansible.builtin.wait_for:
        timeout: "{{ __software_install_rescue_timeout }}"

  always:

    - name: install | Wait for device to reboot.
      ansible.builtin.wait_for_connection:
        delay: "{{ __software_reboot_delay }}"
        timeout: "{{ __software_reboot_timeout }}"


- name: install | Install NXOS.
  when: ansible_network_os is eq('cisco.nxos.nxos')
  block:

    - name: install | Copy running-config startup-config.
      cisco.nxos.nxos_config:
        save_when: always

    - name: install | Install compliant OS and reboot.
      cisco.nxos.nxos_install_os:
        system_image_file: "{{ software_image }}"
        issu: "{{ software_issu }}"
      vars:
        ansible_command_timeout: "{{ software_install_timeout }}"
        ansible_connect_timeout: "{{ software_install_timeout }}"

  rescue:

    - name: install | Sleep to recover.
      ansible.builtin.wait_for:
        timeout: "{{ __software_install_rescue_timeout }}"

  always:

    - name: install | Wait for device to reboot.
      ansible.builtin.wait_for_connection:
        delay: "{{ __software_reboot_delay }}"
        timeout: "{{ __software_reboot_timeout }}"


- name: install | Assert the software upgrade.
  when: not ansible_check_mode
  block:

    - name: install | Gather facts.
      cisco.ios.ios_facts:
        gather_subset:
          - min
      register: __software_result
      until: not __software_result['failed']
      retries: 5
      delay: 10

    - name: install | Assert the software version.
      ansible.builtin.assert:
        that:
          - ansible_facts['net_version'] is ansible.builtin.version(software_version)
        quiet: true
