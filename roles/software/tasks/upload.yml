---
# tasks file for software

- name: upload | Check if the compliant software image is present in flash.
  cisco.ios.ios_command:
    commands:
      - "show flash: | include {{ software_image }}"
  check_mode: false
  when: ansible_network_os is eq('cisco.ios.ios')
  register: __software_flash_output

- name: upload | Upload software image.
  when:
    - ansible_network_os is eq('cisco.ios.ios')
    - ansible_facts['net_iostype'] is eq('IOS-XE')
    - __software_flash_output['stdout'][0] is not ansible.builtin.search(software_image)
  block:

    - name: upload | Remove inactive software.
      cisco.ios.ios_command:
        commands:
          - command: "install remove inactive"
            prompt: "Do you want to remove the above files"
            answer: "y"
      when: not ansible_check_mode
      changed_when: true
      vars:
        ansible_command_timeout: "{{ software_upload_timeout }}"
        ansible_connect_timeout: "{{ software_upload_timeout }}"

    - name: upload | Ensure bulk-mode is enabled for ssh.
      cisco.ios.ios_config:
        lines:
          - "ip ssh bulk-mode 131072"
      when: software_upload_bulk_mode | ansible.builtin.bool

    - name: upload | Upload compliant software image.
      ansible.netcommon.cli_command:
        command: >-
          copy scp://{{ software_user }}@{{ software_server }}/{{ software_path }}/{{ software_image }}
          flash:/ {{ (software_vrf is defined) | ternary('vrf ' + software_vrf | default(omit), '') }}
        prompt:
          - "Destination filename"
          - "Password"
        answer:
          - "{{ software_image }}"
          - "{{ software_password }}"
        check_all: true
      no_log: true
      changed_when: true
      throttle: "{{ software_upload_throttle }}"
      when: not ansible_check_mode
      vars:
        ansible_command_timeout: "{{ software_upload_timeout }}"
        ansible_connect_timeout: "{{ software_upload_timeout }}"


- name: upload | Upload software image.
  when:
    - ansible_network_os is eq('cisco.ios.ios')
    - ansible_facts['net_iostype'] is eq('IOS')
    - __software_flash_output['stdout'][0] is not ansible.builtin.search(software_image)
  block:

    - name: upload | Ensure tftp blocksize before image upload.
      cisco.ios.ios_config:
        lines:
          - "ip tftp blocksize 8192"

    - name: upload | Upload compliant software image.
      cisco.ios.ios_command:
        commands:
          - command: >-
              copy tftp://{{ software_server }}/{{ software_image }}
              flash:/ {{ (software_vrf is defined) | ternary('vrf ' + software_vrf | default(omit), '') }}
            prompt: "Destination filename"
            answer: "{{ software_image }}"
      changed_when: true
      throttle: "{{ software_upload_throttle }}"
      vars:
        ansible_command_timeout: "{{ software_upload_timeout }}"
        ansible_connect_timeout: "{{ software_upload_timeout }}"


- name: upload | Upload software image.
  when: ansible_network_os is eq('cisco.nxos.nxos')
  block:

    - name: upload | Check if the compliant software image is present in bootflash.
      cisco.nxos.nxos_command:
        commands:
          - "dir bootflash: | include {{ software_image }}"
      check_mode: false
      register: __software_bootflash_output

    - name: upload | Upload compliant software image.
      cisco.nxos.nxos_file_copy:
        file_pull: true
        file_pull_kstack: "{{ software_upload_bulk_mode }}"
        file_pull_timeout: "{{ software_upload_timeout }}"
        remote_file: "{{ software_path }}/{{ software_image }}"
        remote_scp_server: "{{ software_server }}"
        remote_scp_server_user: "{{ software_user }}"
        remote_scp_server_password: "{{ software_password }}"
        vrf: "{{ software_vrf }}"
      when: __software_bootflash_output['stdout'][0] is not ansible.builtin.search(software_image)
      throttle: "{{ software_upload_throttle }}"
